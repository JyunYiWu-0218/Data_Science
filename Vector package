"""
memoryview(): 
              https://www.programiz.com/python-programming/methods/built-in/memoryview Python Buffer Protocol:

Python Buffer Protocol:
The buffer protocol provides a way to access the internal data of an object. This internal data is a memory array or a buffer.
The buffer protocol allows one object to expose its internal data (buffers) and the other to access those buffers without intermediate copying.
This protocol is only accessible to us at the C-API level and not using our normal codebase.
So, in order to expose the same protocol to the normal Python codebase, memory views are present.

memory views:
A memory view is a safe way to expose the buffer protocol in Python.
It allows you to access the internal buffers of an object by creating a memory view object.

Why buffer protocol and memory views are important?
Remember that whenever we perform some action on an object (call a function of an object, slice an array), Python needs to create a copy of the object.
If we have large data to work with (eg. binary data of an image), we would unnecessarily create copies of huge chunks of data, which serves almost no use.
Using the buffer protocol, we can give another object access to use/modify the large data without copying it. This makes the program use less memory and increases the execution speed.
"""

chr(): https://www.programiz.com/python-programming/methods/built-in/chr

operator(): https://docs.python.org/3/library/operator.html

functools.reduce(): https://www.geeksforgeeks.org/reduce-in-python/

functools(): https://docs.python.org/3/library/functools.html

hash(): https://www.programiz.com/python-programming/methods/built-in/hash

bytes(): https://www.programiz.com/python-programming/methods/built-in/bytes

ord(): https://www.programiz.com/python-programming/methods/built-in/ord

find(): https://www.w3schools.com/python/ref_string_find.asp

reprlib(): https://docs.python.org/3/library/reprlib.html 
